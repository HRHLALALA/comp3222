// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2018 16:58:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part2_vlg_sample_tst(
	KEY,
	sampler_tx
);
input [2:0] KEY;
output sampler_tx;

reg sample;
time current_time;
always @(KEY)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module part2_vlg_check_tst (
	Debug,
	LEDR,
	sampler_rx
);
input [8:0] Debug;
input [9:0] LEDR;
input sampler_rx;

reg [8:0] Debug_expected;
reg [9:0] LEDR_expected;

reg [8:0] Debug_prev;
reg [9:0] LEDR_prev;

reg [8:0] Debug_expected_prev;
reg [9:0] LEDR_expected_prev;

reg [8:0] last_Debug_exp;
reg [9:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Debug_prev = Debug;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	Debug_expected_prev = Debug_expected;
	LEDR_expected_prev = LEDR_expected;
end


// expected Debug[ 8 ]
initial
begin
	Debug_expected[8] = 1'bX;
end 
// expected Debug[ 7 ]
initial
begin
	Debug_expected[7] = 1'bX;
end 
// expected Debug[ 6 ]
initial
begin
	Debug_expected[6] = 1'bX;
end 
// expected Debug[ 5 ]
initial
begin
	Debug_expected[5] = 1'bX;
end 
// expected Debug[ 4 ]
initial
begin
	Debug_expected[4] = 1'bX;
end 
// expected Debug[ 3 ]
initial
begin
	Debug_expected[3] = 1'bX;
end 
// expected Debug[ 2 ]
initial
begin
	Debug_expected[2] = 1'bX;
end 
// expected Debug[ 1 ]
initial
begin
	Debug_expected[1] = 1'bX;
end 
// expected Debug[ 0 ]
initial
begin
	Debug_expected[0] = 1'bX;
end 
// expected LEDR[ 9 ]
initial
begin
	LEDR_expected[9] = 1'bX;
end 
// expected LEDR[ 8 ]
initial
begin
	LEDR_expected[8] = 1'bX;
end 
// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(Debug_expected or Debug or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Debug = %b | expected LEDR = %b | ",Debug_expected_prev,LEDR_expected_prev);
	$display("| real Debug = %b | real LEDR = %b | ",Debug_prev,LEDR_prev);
`endif
	if (
		( Debug_expected_prev[0] !== 1'bx ) && ( Debug_prev[0] !== Debug_expected_prev[0] )
		&& ((Debug_expected_prev[0] !== last_Debug_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[0] = Debug_expected_prev[0];
	end
	if (
		( Debug_expected_prev[1] !== 1'bx ) && ( Debug_prev[1] !== Debug_expected_prev[1] )
		&& ((Debug_expected_prev[1] !== last_Debug_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[1] = Debug_expected_prev[1];
	end
	if (
		( Debug_expected_prev[2] !== 1'bx ) && ( Debug_prev[2] !== Debug_expected_prev[2] )
		&& ((Debug_expected_prev[2] !== last_Debug_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[2] = Debug_expected_prev[2];
	end
	if (
		( Debug_expected_prev[3] !== 1'bx ) && ( Debug_prev[3] !== Debug_expected_prev[3] )
		&& ((Debug_expected_prev[3] !== last_Debug_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[3] = Debug_expected_prev[3];
	end
	if (
		( Debug_expected_prev[4] !== 1'bx ) && ( Debug_prev[4] !== Debug_expected_prev[4] )
		&& ((Debug_expected_prev[4] !== last_Debug_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[4] = Debug_expected_prev[4];
	end
	if (
		( Debug_expected_prev[5] !== 1'bx ) && ( Debug_prev[5] !== Debug_expected_prev[5] )
		&& ((Debug_expected_prev[5] !== last_Debug_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[5] = Debug_expected_prev[5];
	end
	if (
		( Debug_expected_prev[6] !== 1'bx ) && ( Debug_prev[6] !== Debug_expected_prev[6] )
		&& ((Debug_expected_prev[6] !== last_Debug_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[6] = Debug_expected_prev[6];
	end
	if (
		( Debug_expected_prev[7] !== 1'bx ) && ( Debug_prev[7] !== Debug_expected_prev[7] )
		&& ((Debug_expected_prev[7] !== last_Debug_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[7] = Debug_expected_prev[7];
	end
	if (
		( Debug_expected_prev[8] !== 1'bx ) && ( Debug_prev[8] !== Debug_expected_prev[8] )
		&& ((Debug_expected_prev[8] !== last_Debug_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_expected_prev);
		$display ("     Real value = %b", Debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Debug_exp[8] = Debug_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#240000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module part2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] KEY;
// wires                                               
wire [8:0] Debug;
wire [9:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
part2 i1 (
// port map - connection between master ports and signals/registers   
	.Debug(Debug),
	.KEY(KEY),
	.LEDR(LEDR)
);

// KEY[1]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
	KEY[1] = #10000 1'b1;
	KEY[1] = #10000 1'b0;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #20000 1'b1;
end 

// KEY[2]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
	KEY[2] = #10000 1'b1;
	KEY[2] = #10000 1'b0;
end 

part2_vlg_sample_tst tb_sample (
	.KEY(KEY),
	.sampler_tx(sampler)
);

part2_vlg_check_tst tb_out(
	.Debug(Debug),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

