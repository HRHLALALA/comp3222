// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/13/2018 22:30:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    search
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module search_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg clk;
reg Restart;
reg start;
// wires                                               
wire [6:0] debug;
wire found;
wire [4:0] result;

// assign statements (if any)                          
search i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.clk(clk),
	.debug(debug),
	.found(found),
	.Restart(Restart),
	.result(result),
	.start(start)
);
initial 
begin 
#1000000 $stop;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
end 
initial 
begin 
#1000000 $stop;
end 
endmodule

